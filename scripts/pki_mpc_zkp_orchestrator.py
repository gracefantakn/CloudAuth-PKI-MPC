"""
Orchestrateur Principal PKI-MPC-ZKP
Coordonne tous les composants de l'architecture hybride
"""

import asyncio
import json
import time
import logging
from typing import Dict, List, Optional, Any, Tuple
from dataclasses import dataclass, field
from enum import Enum
import signal
import sys
import os

# Imports des composants d√©velopp√©s
from dkg_feldman_implementation import FeldmanVSSDKG
from tss_ecdsa_implementation import TSSECDSA
from zkp_proof_generator import ZKPProofGenerator
from pbft_consensus_implementation import PBFTNetwork, ClientRequest
from ptp_sync_implementation import PTPNetwork
from ca_augmented_implementation import CertificateAugmentedCA
from mpc_node_config import MPCNode
from cloud_service_zkp_auth import CloudService

class SystemState(Enum):
    """√âtats du syst√®me global"""
    INITIALIZING = "initializing"
    DKG_PHASE = "dkg_phase"
    READY = "ready"
    OPERATIONAL = "operational"
    MAINTENANCE = "maintenance"
    SHUTDOWN = "shutdown"
    ERROR = "error"

@dataclass
class SystemConfiguration:
    """Configuration globale du syst√®me"""
    # Configuration MPC
    mpc_threshold: int = 3
    mpc_total_nodes: int = 5
    
    # Configuration r√©seau
    base_port: int = 8000
    ca_port: int = 8443
    cloud_service_port: int = 8444
    
    # Configuration temporelle
    sync_timeout: int = 30
    operation_timeout: int = 120
    
    # Configuration s√©curit√©
    max_concurrent_operations: int = 10
    session_timeout: int = 3600
    
    # Configuration tests
    test_mode: bool = True
    simulation_delays: bool = True
    verbose_logging: bool = True

@dataclass
class SystemMetrics:
    """M√©triques globales du syst√®me"""
    startup_time: float = 0.0
    total_operations: int = 0
    successful_operations: int = 0
    failed_operations: int = 0
    certificates_issued: int = 0
    zkp_verifications: int = 0
    mpc_signatures: int = 0
    average_operation_time: float = 0.0
    last_heartbeat: float = 0.0
    
class PKIMPCZKPOrchestrator:
    """
    Orchestrateur principal coordonnant tous les composants
    de l'architecture PKI-MPC-ZKP
    """
    
    def __init__(self, config: SystemConfiguration):
        self.config = config
        self.state = SystemState.INITIALIZING
        self.metrics = SystemMetrics()
        
        # Logging configuration
        self._setup_logging()
        
        # Composants du syst√®me
        self.dkg_system: Optional[FeldmanVSSDKG] = None
        self.tss_system: Optional[TSSECDSA] = None
        self.zkp_generator: Optional[ZKPProofGenerator] = None
        self.pbft_network: Optional[PBFTNetwork] = None
        self.ptp_network: Optional[PTPNetwork] = None
        self.ca_authority: Optional[CertificateAugmentedCA] = None
        self.mpc_nodes: Dict[int, MPCNode] = {}
        self.cloud_services: Dict[str, CloudService] = {}
        
        # √âtat des cl√©s distribu√©es
        self.distributed_keys: Dict[int, Tuple[int, Any]] = {}
        self.system_ready = False
        
        # Gestion des t√¢ches asynchrones
        self.background_tasks: List[asyncio.Task] = []
        
        # Gestionnaire de signaux pour arr√™t propre
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)
        
        self.logger.info(f"üöÄ Orchestrateur PKI-MPC-ZKP initialis√©")
        self.logger.info(f"   Configuration: {config.mpc_threshold}/{config.mpc_total_nodes} MPC")
    
    def _setup_logging(self):
        """Configure le syst√®me de logging"""
        log_level = logging.DEBUG if self.config.verbose_logging else logging.INFO
        
        logging.basicConfig(
            level=log_level,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[
                logging.StreamHandler(sys.stdout),
                logging.FileHandler('pki_mpc_zkp.log')
            ]
        )
        
        self.logger = logging.getLogger('PKI-MPC-ZKP')
    
    def _signal_handler(self, signum, frame):
        """Gestionnaire de signaux pour arr√™t propre"""
        self.logger.info(f"üì° Signal {signum} re√ßu, arr√™t du syst√®me...")
        asyncio.create_task(self.shutdown())
    
    async def initialize_system(self) -> bool:
        """
        Initialise tous les composants du syst√®me dans l'ordre correct
        """
        start_time = time.time()
        self.logger.info("üîß Initialisation du syst√®me PKI-MPC-ZKP")
        
        try:
            # Phase 1: Synchronisation temporelle
            await self._initialize_time_sync()
            
            # Phase 2: R√©seau de consensus
            await self._initialize_consensus_network()
            
            # Phase 3: N≈ìuds MPC
            await self._initialize_mpc_nodes()
            
            # Phase 4: G√©n√©ration de cl√©s distribu√©e
            await self._perform_distributed_key_generation()
            
            # Phase 5: Syst√®mes cryptographiques
            await self._initialize_crypto_systems()
            
            # Phase 6: Autorit√© de certification
            await self._initialize_certificate_authority()
            
            # Phase 7: Services cloud
            await self._initialize_cloud_services()
            
            # Phase 8: Tests de connectivit√©
            await self._run_connectivity_tests()
            
            self.metrics.startup_time = time.time() - start_time
            self.state = SystemState.READY
            self.system_ready = True
            
            self.logger.info(f"‚úÖ Syst√®me initialis√© en {self.metrics.startup_time:.2f}s")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur initialisation: {e}")
            self.state = SystemState.ERROR
            return False
    
    async def _initialize_time_sync(self):
        """Initialise la synchronisation temporelle PTP"""
        self.logger.info("‚è∞ Initialisation synchronisation temporelle...")
        
        self.ptp_network = PTPNetwork(
            self.config.mpc_total_nodes, 
            grandmaster_id=0
        )
        
        # D√©marrage de la synchronisation
        sync_task = asyncio.create_task(self.ptp_network.start_synchronization())
        self.background_tasks.append(sync_task)
        
        # Attente de stabilisation
        await asyncio.sleep(3)
        
        # V√©rification de la synchronisation
        sync_status = self.ptp_network.get_network_sync_status()
        if sync_status["network_synchronized"]:
            self.logger.info(f"‚úÖ Synchronisation PTP active - Dispersion: {sync_status['time_spread_us']:.1f}¬µs")
        else:
            self.logger.warning("‚ö†Ô∏è  Synchronisation PTP partielle")
    
    async def _initialize_consensus_network(self):
        """Initialise le r√©seau de consensus PBFT"""
        self.logger.info("ü§ù Initialisation r√©seau de consensus PBFT...")
        
        self.pbft_network = PBFTNetwork(self.config.mpc_total_nodes)
        
        # Configuration des callbacks pour op√©rations MPC
        async def mpc_operation_callback(request: ClientRequest, sequence: int):
            await self._handle_consensus_operation(request, sequence)
        
        for node in self.pbft_network.nodes.values():
            node.on_request_executed = mpc_operation_callback
        
        self.logger.info(f"‚úÖ R√©seau PBFT configur√© avec {self.config.mpc_total_nodes} n≈ìuds")
    
    async def _initialize_mpc_nodes(self):
        """Initialise les n≈ìuds MPC"""
        self.logger.info("üîê Initialisation des n≈ìuds MPC...")
        
        for node_id in range(self.config.mpc_total_nodes):
            node = MPCNode(node_id, self.config.mpc_total_nodes, self.config.mpc_threshold)
            self.mpc_nodes[node_id] = node
            
            # D√©marrage du n≈ìud
            node_task = asyncio.create_task(node.start_node())
            self.background_tasks.append(node_task)
        
        # Attente de stabilisation
        await asyncio.sleep(2)
        
        self.logger.info(f"‚úÖ {len(self.mpc_nodes)} n≈ìuds MPC d√©marr√©s")
    
    async def _perform_distributed_key_generation(self):
        """Effectue la g√©n√©ration de cl√©s distribu√©e"""
        self.logger.info("üîë G√©n√©ration de cl√©s distribu√©e (DKG)...")
        self.state = SystemState.DKG_PHASE
        
        # Initialisation du syst√®me DKG
        self.dkg_system = FeldmanVSSDKG(
            threshold=self.config.mpc_threshold,
            num_participants=self.config.mpc_total_nodes
        )
        
        # Ex√©cution de la DKG
        try:
            self.distributed_keys = self.dkg_system.execute_dkg()
            
            # Coordination avec les n≈ìuds MPC pour la DKG
            participants = list(range(self.config.mpc_total_nodes))
            dkg_operation_id = f"dkg_init_{int(time.time())}"
            
            # D√©marrage coordonn√© de la DKG sur tous les n≈ìuds
            dkg_tasks = []
            for node_id, node in self.mpc_nodes.items():
                task = asyncio.create_task(
                    node.participate_in_dkg(dkg_operation_id, participants)
                )
                dkg_tasks.append(task)
            
            # Attente de completion
            dkg_results = await asyncio.gather(*dkg_tasks, return_exceptions=True)
            successful_nodes = sum(1 for r in dkg_results if r is True)
            
            if successful_nodes >= self.config.mpc_threshold:
                self.logger.info(f"‚úÖ DKG r√©ussie sur {successful_nodes}/{len(participants)} n≈ìuds")
            else:
                raise Exception(f"DKG √©chou√©e: seulement {successful_nodes} n≈ìuds r√©ussis")
                
        except Exception as e:
            self.logger.error(f"‚ùå Erreur DKG: {e}")
            raise
    
    async def _initialize_crypto_systems(self):
        """Initialise les syst√®mes cryptographiques"""
        self.logger.info("üîê Initialisation syst√®mes cryptographiques...")
        
        # Syst√®me TSS ECDSA
        participants = list(range(self.config.mpc_total_nodes))
        self.tss_system = TSSECDSA(
            threshold=self.config.mpc_threshold,
            participants=participants
        )
        
        # Chargement des cl√©s DKG
        if self.distributed_keys:
            self.tss_system.load_dkg_results(self.distributed_keys)
        
        # G√©n√©rateur ZKP
        self.zkp_generator = ZKPProofGenerator("./circuits")
        
        self.logger.info("‚úÖ Syst√®mes cryptographiques configur√©s")
    
    async def _initialize_certificate_authority(self):
        """Initialise l'autorit√© de certification augment√©e"""
        self.logger.info("üèõÔ∏è  Initialisation CA Augment√©e...")
        
        self.ca_authority = CertificateAugmentedCA(
            "PKI-MPC-ZKP Demo CA",
            mpc_threshold=self.config.mpc_threshold,
            mpc_total_nodes=self.config.mpc_total_nodes
        )
        
        # Configuration des interfaces
        self.ca_authority.configure_mpc_interface(
            self.tss_system,
            self.zkp_generator,
            self.pbft_network
        )
        
        # D√©marrage des services CA
        ca_task = asyncio.create_task(self.ca_authority.start_ca_services())
        self.background_tasks.append(ca_task)
        
        await asyncio.sleep(1)  # Stabilisation
        
        self.logger.info("‚úÖ CA Augment√©e op√©rationnelle")
    
    async def _initialize_cloud_services(self):
        """Initialise les services cloud"""
        self.logger.info("‚òÅÔ∏è  Initialisation services cloud...")
        
        # Service API principal
        api_service = CloudService("MainAPI", self.config.cloud_service_port)
        api_service.configure_crypto_interfaces(
            self.zkp_generator,
            self.tss_system,
            self.ca_authority
        )
        
        self.cloud_services["main_api"] = api_service
        
        # D√©marrage du service
        service_task = asyncio.create_task(api_service.start_service())
        self.background_tasks.append(service_task)
        
        await asyncio.sleep(2)  # Stabilisation
        
        self.logger.info(f"‚úÖ Service cloud d√©marr√© sur port {self.config.cloud_service_port}")
    
    async def _run_connectivity_tests(self):
        """Effectue des tests de connectivit√© inter-composants"""
        self.logger.info("üîó Tests de connectivit√©...")
        
        test_results = []
        
        # Test 1: Communication PBFT
        try:
            test_request = ClientRequest(
                client_id="connectivity_test",
                operation="health_check",
                timestamp=time.time(),
                params={"test": True}
            )
            
            pbft_success = await self.pbft_network.submit_to_primary(test_request)
            test_results.append(("PBFT", pbft_success))
        except Exception as e:
            test_results.append(("PBFT", False))
            self.logger.warning(f"‚ö†Ô∏è  Test PBFT √©chou√©: {e}")
        
        # Test 2: Synchronisation PTP
        if self.ptp_network:
            sync_status = self.ptp_network.get_network_sync_status()
            ptp_success = sync_status["network_synchronized"]
            test_results.append(("PTP", ptp_success))
        
        # Test 3: N≈ìuds MPC
        mpc_healthy = sum(
            1 for node in self.mpc_nodes.values()
            if node.get_node_status()["state"] == "ready"
        )
        mpc_success = mpc_healthy >= self.config.mpc_threshold
        test_results.append(("MPC", mpc_success))
        
        # R√©sum√© des tests
        passed_tests = sum(1 for _, success in test_results if success)
        total_tests = len(test_results)
        
        self.logger.info(f"üìä Tests connectivit√©: {passed_tests}/{total_tests} r√©ussis")
        
        for test_name, success in test_results:
            status = "‚úÖ" if success else "‚ùå"
            self.logger.info(f"  {status} {test_name}")
        
        if passed_tests < total_tests:
            self.logger.warning("‚ö†Ô∏è  Certains tests de connectivit√© ont √©chou√©")
    
    async def _handle_consensus_operation(self, request: ClientRequest, sequence: int):
        """Traite les op√©rations provenant du consensus PBFT"""
        operation_start = time.time()
        
        try:
            if request.operation == "tss_signature":
                await self._handle_tss_signature_request(request, sequence)
            elif request.operation == "dkg_key_generation":
                await self._handle_dkg_request(request, sequence)
            elif request.operation == "zkp_verification":
                await self._handle_zkp_verification(request, sequence)
            else:
                self.logger.info(f"‚ÑπÔ∏è  Op√©ration consensus: {request.operation}")
            
            # M√©triques
            operation_time = time.time() - operation_start
            self.metrics.total_operations += 1
            self.metrics.successful_operations += 1
            self._update_average_operation_time(operation_time)
            
        except Exception as e:
            self.logger.error(f"‚ùå Erreur op√©ration consensus: {e}")
            self.metrics.failed_operations += 1
    
    async def _handle_tss_signature_request(self, request: ClientRequest, sequence: int):
        """Traite une requ√™te de signature TSS"""
        self.logger.info(f"‚úçÔ∏è  Signature TSS consensus seq={sequence}")
        
        params = request.params
        message_hash = bytes.fromhex(params.get("data_hash", ""))
        participating_nodes = params.get("participating_nodes", list(range(self.config.mpc_threshold)))
        
        if self.tss_system and message_hash:
            try:
                # Signature distribu√©e
                signature = self.tss_system.sign_message(message_hash, participating_nodes)
                self.metrics.mpc_signatures += 1
                self.logger.info(f"‚úÖ Signature TSS g√©n√©r√©e pour seq={sequence}")
                
            except Exception as e:
                self.logger.error(f"‚ùå Erreur signature TSS: {e}")
    
    async def _handle_dkg_request(self, request: ClientRequest, sequence: int):
        """Traite une requ√™te DKG"""
        self.logger.info(f"üîë DKG consensus seq={sequence}")
        # Impl√©mentation de DKG additionnelle si n√©cessaire
    
    async def _handle_zkp_verification(self, request: ClientRequest, sequence: int):
        """Traite une v√©rification ZKP"""
        self.logger.info(f"üîç V√©rification ZKP consensus seq={sequence}")
        self.metrics.zkp_verifications += 1
    
    def _update_average_operation_time(self, new_time: float):
        """Met √† jour le temps moyen d'op√©ration"""
        if self.metrics.average_operation_time == 0:
            self.metrics.average_operation_time = new_time
        else:
            # Moyenne mobile
            self.metrics.average_operation_time = (
                self.metrics.average_operation_time * 0.9 + new_time * 0.1
            )
    
    async def run_system(self):
        """Lance le syst√®me en mode op√©rationnel"""
        if not self.system_ready:
            self.logger.error("‚ùå Syst√®me non initialis√©")
            return
        
        self.state = SystemState.OPERATIONAL
        self.logger.info("üöÄ Syst√®me PKI-MPC-ZKP op√©rationnel")
        
        # D√©marrage des t√¢ches de monitoring
        monitoring_task = asyncio.create_task(self._monitoring_routine())
        heartbeat_task = asyncio.create_task(self._heartbeat_routine())
        
        self.background_tasks.extend([monitoring_task, heartbeat_task])
        
        try:
            # Boucle principale
            while self.state == SystemState.OPERATIONAL:
                await asyncio.sleep(1)
                
        except KeyboardInterrupt:
            self.logger.info("‚èπÔ∏è  Arr√™t demand√© par l'utilisateur")
        except Exception as e:
            self.logger.error(f"‚ùå Erreur syst√®me: {e}")
            self.state = SystemState.ERROR
        finally:
            await self.shutdown()
    
    async def _monitoring_routine(self):
        """Routine de monitoring du syst√®me"""
        while self.state == SystemState.OPERATIONAL:
            try:
                await asyncio.sleep(30)  # Monitoring toutes les 30s
                
                # Collecte des m√©triques
                system_health = await self._collect_system_metrics()
                
                # V√©rification de la sant√© globale
                if not system_health["healthy"]:
                    self.logger.warning("‚ö†Ô∏è  Probl√®me de sant√© syst√®me d√©tect√©")
                    
                    # Auto-r√©cup√©ration si possible
                    if system_health["recoverable"]:
                        await self._attempt_auto_recovery()
                
                # Log p√©riodique des m√©triques
                self.logger.info(
                    f"üìä M√©triques: Ops={self.metrics.total_operations}, "
                    f"Succ√®s={self.metrics.successful_operations}, "
                    f"√âchecs={self.metrics.failed_operations}, "
                    f"Temps moy={self.metrics.average_operation_time:.3f}s"
                )
                
            except Exception as e:
                self.logger.error(f"‚ùå Erreur monitoring: {e}")
                await asyncio.sleep(5)
    
    async def _collect_system_metrics(self) -> Dict[str, Any]:
        """Collecte les m√©triques de tous les composants"""
        health_data = {
            "healthy": True,
            "recoverable": True,
            "components": {}
        }
        
        # Sant√© des n≈ìuds MPC
        mpc_health = []
        for node_id, node in self.mpc_nodes.items():
            status = node.get_node_status()
            mpc_health.append(status["state"] == "ready")
            health_data["components"][f"mpc_node_{node_id}"] = status
        
        mpc_healthy_count = sum(mpc_health)
        if mpc_healthy_count < self.config.mpc_threshold:
            health_data["healthy"] = False
            health_data["recoverable"] = mpc_healthy_count >= (self.config.mpc_threshold - 1)
        
        # Sant√© du consensus PBFT
        if self.pbft_network:
            pbft_status = self.pbft_network.get_network_status()
            health_data["components"]["pbft"] = pbft_status
        
        # Sant√© de la CA
        if self.ca_authority:
            ca_status = self.ca_authority.get_ca_status()
            health_data["components"]["ca"] = ca_status
        
        # Sant√© de la synchronisation
        if self.ptp_network:
            sync_status = self.ptp_network.get_network_sync_status()
            health_data["components"]["ptp"] = sync_status
            
            if not sync_status["network_synchronized"]:
                self.logger.warning("‚ö†Ô∏è  Synchronisation temporelle d√©grad√©e")
        
        return health_data
    
    async def _attempt_auto_recovery(self):
        """Tentative de r√©cup√©ration automatique"""
        self.logger.info("üîÑ Tentative de r√©cup√©ration automatique...")
        self.state = SystemState.MAINTENANCE
        
        try:
            # Red√©marrage des n≈ìuds d√©faillants
            for node_id, node in self.mpc_nodes.items():
                status = node.get_node_status()
                if status["state"] != "ready":
                    self.logger.info(f"üîÑ Red√©marrage n≈ìud MPC {node_id}")
                    # Impl√©mentation du red√©marrage
            
            await asyncio.sleep(5)  # Attente stabilisation
            
            # V√©rification de la r√©cup√©ration
            recovery_success = await self._verify_system_health()
            
            if recovery_success:
                self.logger.info("‚úÖ R√©cup√©ration automatique r√©ussie")
                self.state = SystemState.OPERATIONAL
            else:
                self.logger.error("‚ùå R√©cup√©ration automatique √©chou√©e")
                
        except Exception as e:
            self.logger.error(f"‚ùå Erreur r√©cup√©ration: {e}")
        
        if self.state == SystemState.MAINTENANCE:
            self.state = SystemState.OPERATIONAL
    
    async def _verify_system_health(self) -> bool:
        """V√©rifie la sant√© globale du syst√®me"""
        try:
            health_data = await self._collect_system_metrics()
            return health_data["healthy"]
        except Exception:
            return False
    
    async def _heartbeat_routine(self):
        """Routine de heartbeat"""
        while self.state in [SystemState.OPERATIONAL, SystemState.MAINTENANCE]:
            try:
                self.metrics.last_heartbeat = time.time()
                await asyncio.sleep(10)  # Heartbeat toutes les 10s
                
            except Exception as e:
                self.logger.error(f"‚ùå Erreur heartbeat: {e}")
                await asyncio.sleep(5)
    
    async def shutdown(self):
        """Arr√™t propre du syst√®me"""
        self.logger.info("üõë Arr√™t du syst√®me PKI-MPC-ZKP...")
        self.state = SystemState.SHUTDOWN
        
        # Annulation des t√¢ches en arri√®re-plan
        for task in self.background_tasks:
            if not task.done():
                task.cancel()
                try:
                    await task
                except asyncio.CancelledError:
                    pass
        
        # Arr√™t des composants
        for node in self.mpc_nodes.values():
            node.state = node.state.__class__.OFFLINE
        
        self.logger.info("‚úÖ Syst√®me arr√™t√© proprement")
    
    def get_system_status(self) -> Dict[str, Any]:
        """Retourne le statut complet du syst√®me"""
        uptime = time.time() - (self.metrics.startup_time or time.time())
        
        return {
            "system_state": self.state.value,
            "uptime_seconds": uptime,
            "configuration": {
                "mpc_threshold": self.config.mpc_threshold,
                "mpc_total_nodes": self.config.mpc_total_nodes,
                "test_mode": self.config.test_mode
            },
            "metrics": {
                "total_operations": self.metrics.total_operations,
                "successful_operations": self.metrics.successful_operations,
                "failed_operations": self.metrics.failed_operations,
                "certificates_issued": self.metrics.certificates_issued,
                "zkp_verifications": self.metrics.zkp_verifications,
                "mpc_signatures": self.metrics.mpc_signatures,
                "average_operation_time": self.metrics.average_operation_time,
                "success_rate": (
                    self.metrics.successful_operations / max(1, self.metrics.total_operations) * 100
                )
            },
            "components": {
                "mpc_nodes": len(self.mpc_nodes),
                "distributed_keys_generated": bool(self.distributed_keys),
                "ca_operational": self.ca_authority is not None,
                "cloud_services": len(self.cloud_services),
                "pbft_network": self.pbft_network is not None,
                "ptp_sync": self.ptp_network is not None
            },
            "last_heartbeat": self.metrics.last_heartbeat
        }

# Point d'entr√©e principal
async def main():
    """Point d'entr√©e principal du syst√®me"""
    
    print("üöÄ D√©marrage du syst√®me PKI-MPC-ZKP")
    print("=" * 50)
    
    # Configuration du syst√®me
    config = SystemConfiguration(
        mpc_threshold=3,
        mpc_total_nodes=5,
        test_mode=True,
        verbose_logging=True
    )
    
    # Cr√©ation de l'orchestrateur
    orchestrator = PKIMPCZKPOrchestrator(config)
    
    try:
        # Initialisation
        success = await orchestrator.initialize_system()
        
        if not success:
            print("‚ùå √âchec de l'initialisation")
            return
        
        print("\nüéâ Syst√®me pr√™t!")
        print("=" * 50)
        
        # Affichage du statut
        status = orchestrator.get_system_status()
        print(f"√âtat: {status['system_state']}")
        print(f"N≈ìuds MPC: {status['components']['mpc_nodes']}")
        print(f"Cl√©s distribu√©es: {status['components']['distributed_keys_generated']}")
        print(f"CA op√©rationnelle: {status['components']['ca_operational']}")
        print(f"Services cloud: {status['components']['cloud_services']}")
        
        print("\nüì° Syst√®me en fonctionnement...")
        print("Appuyez sur Ctrl+C pour arr√™ter")
        
        # Fonctionnement du syst√®me
        await orchestrator.run_system()
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  Arr√™t demand√© par l'utilisateur")
    except Exception as e:
        print(f"\n‚ùå Erreur fatale: {e}")
    finally:
        await orchestrator.shutdown()
        print("üëã Au revoir!")

if __name__ == "__main__":
    # Ex√©cution du syst√®me complet
    asyncio.run(main())
